{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to modchips","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This guide will guide you through the installation of modchips, there are important things you should know before continuing with this guide.</p> <p>Information</p> <p>If you came here from the NH Server guide, you're here to modchip your Switch. Follow along with this guide if you have the required skills to do so.</p>"},{"location":"#again-this-guide-is-not-for-beginners-and-the-switch-is-not-a-good-first-project","title":"Again, this guide is not for beginners and the Switch is not a good first project.","text":"<p>The first thing you should know is that this guide is not something you will want to follow without any prior (micro)soldering experience whatsoever. Installing a modchip requires the aforementioned microsoldering skills and also requires hardware knowledge (knowledge about hardware in general and also the layout of the Switch's motherboard).</p> <p></p> <p>The second most important thing is that we only support Picofly (the stock <code>RP2040 Zero</code> development board and \"modchip variant\" of it) as it's fully open source from its <code>RP2040</code> microcontroller to its firmware. Any modchip containing the <code>RP2040</code> microcontroller is a Picofly modchip.</p> <p>You can find them on AliExpress and similar websites by common names such as <code>RP2040 switch</code> or simply <code>picofly</code>, Amazon also has resellers that sell them but (as should be known), resellers sell the cheaper AliExpress products for a higher price. Buying them from Amazon is not recommended unless you don't care about the price.</p> <ul> <li>Note: Picofly listings with \"Hwfly\" in the name are not Hwfly modchips but just use the word as keyword so they can be found easier. Picofly modchips have the larger square black chip with the Raspberry Pi logo on them, which is one way of identifying them (this is the <code>RP2040</code> microcontroller). They also look much \"simpler\" in appearance compared to Hwfly modchips.</li> </ul> <p>Once you've read this, you may continue to the next page.</p> Note <p>Other modchips, such as Hwfly or Instinct-NX are not assisted with except for the flashing of open source firmware to Hwfly and SX based modchips. The reason for this is because Hwfly and Instinct-NX are derivatives of SX series modchips, also referred to as \"clones\". SX series modchips were produced by TX (Team Xecuter) and they were part of the reason why Switch modchips have the bad reputation they have. Next to that, TX are also responsible for the creation of Hwfly and Instinct-NX modchips (or continuation of SX series modchips). They also use closed source microcontrollers, board designs and use poor quality board components.</p> <p>Continue to Modchip variants </p>"},{"location":"credits/credits/","title":"Credits","text":""},{"location":"credits/credits/#about-me","title":"About me","text":"<p>This guide was written by DefenderOfHyrule. I'm just a nerd that likes to learn about tech, I've always been interested in technology and I will never stop learning about it (and will never stop learning in general).</p> <p>There isn't much to say on this page, I hope you've enjoyed my guide :)</p>"},{"location":"credits/credits/#donation","title":"Donation","text":"<p>If you want to donate, you can do so on PayPal and buymeacoffee. Thank you in advance :)</p>"},{"location":"extras/alternate_flashing/","title":"Alternative methods to flash your modchip","text":""},{"location":"extras/alternate_flashing/#information","title":"Information","text":"<p>This page solely exists for people with already-modchipped Switch consoles. It's not necessary to follow if your modchip installation is working fine as is and could potentially introduce more issues if your modchip installation is experiencing errors or similar.</p> <p>That being said, I do recommend updating your modchip's firmware to the latest firmware version to get the best possible performance, reliability and hardware compatibility.</p>"},{"location":"extras/alternate_flashing/#updating-your-picofly-modchip-firmware-via-picofly-toolbox","title":"Updating your Picofly modchip firmware via <code>picofly toolbox</code>:","text":"<ol> <li> <p>Download <code>picofly_toolbox_0.2.bin</code> and <code>update.bin</code> from the links below:</p> <ul> <li>Picofly toolbox</li> <li>Firmware 2.75 (download <code>update.bin</code>)</li> </ul> </li> <li> <p>Place <code>update.bin</code> on the root of your SD card.</p> </li> <li> <p>Place <code>picofly_toolbox_0.2.bin</code> in <code>sd:/bootloader/payloads</code>.</p> </li> <li> <p>Boot into hekate and go to <code>Payloads</code> &gt; <code>picofly_toolbox_0.2.bin</code>.</p> </li> <li> <p>Press <code>Info</code> underneath the <code>Firmware</code> section to see the information about the firmware version you're running. Press any key (the Volume or Power buttons) to return to the previous menu.</p> <ul> <li>If it's running version <code>2.75</code>, you're already up to date and do not need to update.</li> <li>Note: Some Picofly modchips come pre-flashed with a fork of the spacecraft-nx firmware for hwfly modchips (the <code>NO SD</code> screen with the interactive rocket when you turn the Switch on without SD card inserted). You should not use this firmware as it is unstable and can cause things like Android/Linux to not boot at all (if relevant to your situation), slow boot times and it can potentially shorten the lifespan of your modchip. If you have this firmware version, the <code>Info</code> menu will not report a firmware version and will only show <code>Reading firmware info...</code> and this means that you should update your modchip's firmware.</li> </ul> </li> <li> <p>Select <code>Update</code> in the <code>Firmware</code> section and wait for it to finish updating the modchip's firmware from <code>update.bin</code> located on the root of your SD card. (This shouldn't take more than 1-2 seconds.)</p> <ul> <li>Note: Updating <code>sdloader</code> is not necessary for Picofly modchips as updating its firmware automatically updates <code>sdloader</code> as well.</li> </ul> </li> <li> <p>Power the console off by pressing any key and selecting <code>Power off</code>, then turn it back on.</p> <ul> <li>Glitching and training may take a little longer the first time after flashing but should be fast again afterwards.</li> </ul> </li> <li> <p>Verifying if the firmware update was successful can be done by booting into <code>picofly toolbox</code> (in hekate going to <code>Payloads</code> &gt; <code>picofly_toolbox_0.2.bin</code>) and selecting <code>Info</code> again. It should now display the version number as <code>2.75</code>.</p> </li> </ol>"},{"location":"extras/alternate_flashing/#updating-your-hwflysx-series-modchip-firmware-via-hwfly-toolbox","title":"Updating your Hwfly/SX Series modchip firmware via <code>hwfly toolbox</code>:","text":"<p>Note</p> <p>This section assumes that you've previously flashed the SX series modchip with <code>hwfly-nx</code>. If you haven't done so yet, see the bottom of this page to physically flash your modchip by opening up the console. Only do this if you're comfortable with doing so.</p> <ol> <li> <p>Download <code>hwfly_toolbox.bin</code> and <code>release_072.zip</code> from the link below:</p> <ul> <li>https://github.com/DefenderOfHyrule/hwfly-firmware/releases/tag/0.7.2</li> </ul> </li> <li> <p>Place <code>hwfly_toolbox.bin</code> in <code>sd:/bootloader/payloads</code>.</p> </li> <li> <p>Place <code>sdloader.enc</code> from the <code>.zip</code> file on the root of your SD card.</p> </li> <li> <p>Hold <code>Volume Up</code> and boot into hekate, then go to <code>Payloads</code> &gt; <code>hwfly_toolbox.bin</code>, you can let go of volume up once in <code>hwfly toolbox</code>.</p> <ul> <li>Holding <code>Volume Up</code> while turning on the console \"activates\" the modchip. This allows <code>hwfly toolbox</code> to interact with the modchip and therefore also allow you to update its firmware.</li> </ul> </li> <li> <p>Select <code>Update</code> underneath the <code>SD Loader</code> section once in <code>hwfly toolbox</code>.</p> <ul> <li>This will update the <code>sdloader</code> module that the modchip uses to \"inject\" (load) any payload named <code>payload.bin</code> from the root of your SD card.</li> </ul> </li> <li> <p>Power off the console or reboot into hekate (by pressing any key and selecting <code>Power off</code> or <code>Back to hekate</code>) and delete <code>sdloader.enc</code> from the root of your SD.</p> </li> <li> <p>Place <code>firmware.bin</code> from the <code>.zip</code> file on the root of your SD card.</p> </li> <li> <p>Hold <code>Volume Up</code> and boot into hekate, then go to <code>Payloads</code> &gt; <code>hwfly_toolbox.bin</code>, you can let go of volume up once you're in <code>hwfly toolbox</code> once again.</p> </li> <li> <p>Select <code>Update</code> underneath the <code>Firmware</code> section to update the modchip's firmware.</p> </li> <li> <p>Power the console off by pressing any key and selecting <code>Power off</code>, then turn it back on.</p> <ul> <li>Glitching and training may take a little longer the first time after flashing but should be fast again afterwards.</li> </ul> </li> </ol>"},{"location":"extras/picoboot/","title":"PicoBoot (GC)","text":""},{"location":"extras/picoboot/#information","title":"Information","text":"<p>This page is unrelated to Switch hacking but is still something i'd like to cover when I have the time for it. PicoBoot is a <code>Raspberry Pi RP2040 Pico</code> based modchip for the GameCube. The modchip is fully open source and is very cheap compared to all other existing modchips for the GameCube. Specific steps such as photos of the screws you need to unscrew aren't mentioned here as they can be found on guides from iFixit (for example). It's expected for you to know what to unscrew.</p>"},{"location":"extras/picoboot/#picoboot","title":"Picoboot","text":"<p>PicoBoot is a modchip that was \"created\" by webhdx, it uses a stock <code>RP2040 Pico</code> development board that was repurposed as GameCube modchip. Webhdx wrote the Picoboot firmware for the <code>RP2040 Pico</code>, wrote great instructions and provided great information about PicoBoot here. They're a very talented person and you should definitely check their console modding projects out.</p>"},{"location":"extras/picoboot/#overview","title":"Overview","text":"<p>The GameCube has a lot of hardware based mods made for it that will not be covered on this page. PicoBoot is arguably the best and fastest modchip made for the GameCube, it offers the ability to run custom DOL apps on boot and therefore also allows you to run CFW. It can do much more which is also mentioned on webhdx's PicoBoot github repository.</p> <p>The best CFW (Custom FirmWare) available for the GameCube is called Swiss. It's a fantastic CFW that can interact with- and utilize almost any external storage hardware device that exists for the GameCube. Swiss is technically not a traditional CFW (more of an all-in-one homebrew utility) and is essentially just an environment where you can browse external storage devices/launch any <code>.dol</code> file from. Swiss never modifies the GameCube's official system firmware, I call it a CFW because it's the most commonly known/used terminology for it.</p> <p>I will be writing my own installation page with installation instructions that I recommend/prefer personally. All credits go to webhdx and you should follow webhdx's guide here if you want to follow the official guide.</p>"},{"location":"extras/picoboot/#what-you-need","title":"What you need:","text":"<ul> <li>A Raspberry Pi <code>RP2040 Pico</code><ul> <li>Note:</li> </ul> </li> <li>An SD2SP2 expansion card</li> <li>A microSD card (32GB is recommended)</li> <li>Good quality 28 AWG, single core wire</li> <li>Good quality flux</li> <li>A microscope (very optional, the solder points are very big and can easily be seen with the naked eye)</li> <li>A fume extractor (for your own health and safety)</li> </ul>"},{"location":"extras/picoboot/#instructions","title":"Instructions:","text":""},{"location":"extras/sdreader/","title":"Hardmodding the SD card reader","text":""},{"location":"extras/sdreader/#information","title":"Information","text":"<p>This page will be about hardmodding the SD card reader of normal V1/V2 Switch consoles to the motherboard of the Switch. The reason this page exists is because I despise the design of the SD card reader circuitry and hardmodding the SD card is the easier and more fun solution as long as you have the required microsoldering experience.</p> <p>If you're solely looking for the replacement FPC port, its part number is <code>5042081610</code> but it can also be found by the search term \"Nintendo Switch SD Card Reader FPC Port\". It can be found on AliExpress, TaoBao or similar websites.</p>"},{"location":"extras/sdreader/#overview","title":"Overview","text":"<p>I will be using a schematic for this guide, created by @mattyrog (who is also responsible for the creation and documentation of SAMD21 based modchips for unpatched Switch consoles) on gbatemp. This thread contains useful pinouts of the SD card reader's FPC connector and alternative points on the motherboard of the Switch. The other alternative points on the back of the motherboard can also be used but may give you lesser performance or will cause the SD card reader to straight up not work.</p> <p>The following schematics are what will be useful for this guide:</p> Schematics <p></p> <p></p>"},{"location":"extras/sdreader/#what-you-need","title":"What you need:","text":"<ul> <li>A soldering iron with a small(er) tip (preferably temperature controlled that can reach 350C consistently)</li> <li>Good quality flux</li> <li>Good quality 30-32 awg wire (such as Kynar wire, other wire can work as long as it's single core)</li> <li>Isopropyl Alcohol (preferably 95-99% IPA)</li> <li>Soldering tin (leaded is recommended, unleaded will work depending on your skill level)</li> <li>A fume extractor (for your own health and safety)</li> <li>A microscope (optional but recommended)</li> </ul>"},{"location":"extras/sdreader/#instructions","title":"Instructions:","text":""},{"location":"extras/trinket/","title":"SAMD21 based modchips","text":""},{"location":"extras/trinket/#information","title":"Information","text":"<p>This page will be about the installation of <code>SAMD21</code> based modchips for Unpatched Switch consoles only. These modchips allow you to inject any payload on boot and essentially achieve the same result as voltage glitching based modchips, without the voltage glitching part. As I mentioned before, these only work on Unpatched Switch consoles and simply won't work on Patched consoles. These modchips do not rely on voltage glitching and simply allow you to cold boot a payload using <code>fusee-gelee</code> in <code>RCM</code>.</p> <ul> <li>Cold booting means being able to boot into a payload from a fully-off state.</li> </ul>"},{"location":"extras/trinket/#samd21","title":"SAMD21","text":"<p><code>SAMD21</code> is a series of microcontrollers (like the <code>RP2040</code> used in Picofly modchips) that have a lot of purposes and many different applications. These applications can range from Switch modchips to factory equipment (as an example) and are very useful.</p> <p>With this guide, we will be focusing on a <code>SAMD21</code> based modchip called <code>RCM x86</code>, it's a pretty commonly available <code>SAMD21</code> based modchip and is also the most \"modchip\"-like out of them all (in my opinion). The documentation for these types of modchips can be found here. The soldering for these types of modchips is also much easier and straightforward compared to voltage glitching based modchips.</p>"},{"location":"functionality/functionality_of_modchips/","title":"Functionality of modchips","text":""},{"location":"functionality/functionality_of_modchips/#information","title":"Information","text":"<p>This page will cover the functionality of modchips, it will tell you about how they work and why they work.</p>"},{"location":"functionality/functionality_of_modchips/#general-knowledge","title":"General knowledge","text":"<p>Unlike \"unpatched\" consoles (V1 unpatched consoles), modchips enable the ability to run CFW via CPU voltage glitching, which bypass bootROM firmware verifications. It allows <code>payload.bin</code> to be launched in place of running <code>BOOT0</code> (the first partition on your Switch's internal storage that uses Nintendo's official bootloader) normally, loaded via a modchip firmware module named <code>sdloader</code>. This is much different from RCM and its exploit, fusee-gelee, which \"unpatched\" consoles use. Modchips allow any Switch console (like all \"patched\" consoles) to run CFW.</p>"},{"location":"functionality/functionality_of_modchips/#the-sdloader-firmware-module","title":"The <code>sdloader</code> firmware module","text":"<p><code>sdloader</code> is the module built into the Picofly firmware (and all other modchip firmwares) which is responsible for \"injecting\" (loading) <code>payload.bin</code> off of the root of your SD card. It will always run if the modchip installation is successful.</p>"},{"location":"functionality/functionality_of_modchips/#voltage-glitching","title":"Voltage glitching","text":"<p>Voltage glitching essentially \"lags out\" the Switch's CPU by injecting too much voltage and timing out the CPU for a very short amount of time, allowing you to bypass bootROM firmware verification and the \"injection\" of a custom payload (in this case, <code>payload.bin</code>) from the root of your SD card in the newly created time window by voltage glitching. Voltage glitching is commonly used to interrupt the boot process of several other consoles and computers in general as well and is an effective \"attack\" in regards to console hacking.</p>"},{"location":"functionality/functionality_of_modchips/#training","title":"Training","text":"<p>The modchip will do something called \"training\" once successful glitch timings have been found. Training is the process of \"stress testing\" the glitch timings the modchip found, glitch timings are the aforementioned time windows the modchip creates to \"inject\" <code>payload.bin</code>. Several glitch timing entries are written to the modchip's \"internal storage\" and are used for quick boot times. If one of the glitch timings changes or is updated by performing a Switch firmware update, the modchip will attempt to glitch and run <code>sdloader</code> with the rest of the remaining glitch timings. If glitching or training fails, resetting the modchip may be necessary (requiring you to open up the console and accessing the modchip manually). Picofly will typically never fail glitching and training unless hardware issues are present.</p>"},{"location":"functionality/functionality_of_modchips/#the-modchips-payload","title":"The modchip's payload","text":"<p>The modchip, after glitching and training, will write its payload to an empty sector on the <code>BOOT0</code> partition of your Switch's internal storage. This payload is responsible for making your Switch boot up to the Picofly splash screen (the <code>No SD Card</code> splash screen with the Picofly logo) and stops the Switch from booting normally (unless <code>sdloader</code> is bypassed by holding both volume buttons and powering on the console). This payload is not dangerous and does not mess with any important aspect of the Switch's internal storage.</p>"},{"location":"functionality/functionality_of_modchips/#resources-on-voltage-glitching","title":"Resources on voltage glitching","text":"<p>Here are some resources that detail voltage glitching in depth, with great explanations on how it works:</p> <ul> <li>https://blog.securitybits.io/2019/06/voltage-glitching-on-the-cheap</li> <li>https://www.synacktiv.com/en/publications/how-to-voltage-fault-injection</li> </ul>"},{"location":"modchip/dat0-adapter/","title":"DAT0 Adapter method","text":""},{"location":"modchip/dat0-adapter/#dat0-adapter-guide","title":"DAT0 Adapter Guide","text":""},{"location":"modchip/dat0-adapter/#what-is-the-dat0-adapter-method","title":"What is the \"DAT0 Adapter method\"?","text":"<p>With traditional OLED modchip installations, you use a DAT0 adapter that slides underneath the eMMC chip on the back of the motherboard. This method is the easiest and should be used by majority of people, it can come at the cost of installation error however. Depending on the skills of the modchip installer, the DAT0 adapter may come \"loose\" after a while of using it due to thermal cycles (turning the switch on and off). Additionally, these types of adapters can be tricky to install correctly if the console you're modchipping uses an SK hynix eMMC chip. The DAT0 adapter has a little exposed \"C\" shaped trace that \"cups\" the DAT0 solder ball underneath the eMMC chip, this is how the contact with the <code>C</code> (DAT0) point is formed.</p>"},{"location":"modchip/dat0-adapter/#requirements","title":"Requirements:","text":"<ul> <li>The DAT0 adapter</li> <li>Soldering iron</li> <li>Flux</li> <li>Solder with rosin core</li> <li>Tweezers</li> </ul>"},{"location":"modchip/dat0-adapter/#instructions","title":"Instructions:","text":"<ol> <li> <p>Turn the Switch's motherboard around and locate the eMMC chip at the top right of the motherboard.</p> </li> <li> <p>Remove the eMMC's RF (metal) cover  </p> </li> <li> <p>Remove a part of the top side of the frame, then slide your DAT0 adapter underneath the eMMC chip until the markings on the adapter line up with the outline of the eMMC chip.  </p> </li> <li> <p>Use tweezers to push the DAT0 adapter into the solder ball underneath the eMMC chip (be careful while doing this, don't put too much pressure on it) and solder the anker point of the DAT0 adapter to a part of the anker points the frame was attached to on the motherboard. Make sure you keep pressure on the DAT0 adapter until you've soldered the anker points down. This is your <code>C</code>(DAT0) point.  </p> <ul> <li>Optional: Test the <code>C</code> point by putting the negative lead of your multimeter on the <code>C</code> point of the DAT0 adapter and putting your positive lead on ground. You should end up with a value in between ~<code>0.450</code>-<code>0.850</code>, generally speaking. This value is measured in Diode mode on a multimeter. (As mentioned at the top of the main installation page, the range differs from console to console and if it works for you, there is no issue.)</li> </ul> </li> </ol>"},{"location":"modchip/dat0-adapter/#everything-looking-good","title":"Everything looking good?:","text":"<p>If everything looks good, we will return back to the original installation guide. Continue from Step 15 onwards.</p> <p>Continue to the main Installation guide </p>"},{"location":"modchip/flashing_modchip/","title":"Flashing the modchip","text":""},{"location":"modchip/flashing_modchip/#introduction","title":"Introduction","text":"<p>Modchips have their own separate firmware version that is separate from the Switch's system firmware version, this firmware ultimately determines the functionality and performance of your modchip. Flashing the firmware to the modchip is not a requirement but it is recommended to do so, generally speaking.</p> <p>Any Picofly firmware below version <code>2.70</code> is deprecated and is no longer supported, this is why we will be ensuring that the modchip has the latest firmware version, namely <code>2.75</code>, flashed to it. This will make sure that you have the best performance and hardware compatibility.</p> <p>This process is the same for all Picofly modchip models, just use the pictures in the instructions below as reference for your own modchip as the Normal and Lite Picofly models look physically different from the OLED model.</p> <p>If you're looking to flash your modchip's firmware while it's installed in your Switch console already, see this page.</p>"},{"location":"modchip/flashing_modchip/#what-you-need","title":"What you need:","text":"<ul> <li>The micro USB / USB-C debug port that comes with a modchip \"set\" (image shown in the \"Instructions\" section below)</li> <li>Your Picofly modchip / A stock <code>RP2040 Zero</code> development board</li> <li>A computer or Android phone (computer recommended)</li> <li>A USB type C to USB type A cable / A micro USB to USB type A cable capable of data transfer<ul> <li>The type of cable required depends on the modchip revision you have.    More recently produced Picofly modchips will come with USB type C debug ports.    The stock <code>RP2040 Zero</code> development board has a USB-C port soldered onto it and will need to be desoldered later.</li> </ul> </li> </ul>"},{"location":"modchip/flashing_modchip/#instructions","title":"Instructions:","text":"<ol> <li> <p>Download the <code>.uf2</code>file from the link below:</p> <ul> <li>Firmware 2.75</li> </ul> </li> <li> <p>Position your modchip and included USB debug port in the upwards facing position. This means with the side of the RP2040 microcontroller (the square chip with the Raspberry Pi logo) facing you. This is important    because if you don't do this, you can risk frying the USB circuitry of the modchip. The USB debug port additionally also has <code>UP</code> text written on it to indicate the orientation of it.  </p> <ul> <li>This step can be ignored for the stock <code>RP2040 Zero</code> development board users as they can be flashed directly via the soldered on USB-C port.</li> </ul> </li> <li> <p>Lift up the locking tab and plug the USB debug port into the connector at the bottom of your modchip, then lock the locking tab to secure the USB debug port in place.  </p> <ul> <li>This step can also be ignored for the stock <code>RP2040 Zero</code> development board users as they do not have this port and do not require a separate USB debug port.</li> </ul> </li> <li> <p>Hold the <code>BOOT</code> button on the modchip and plug the USB debug port into your PC via your data transfer-capable USB cable.  </p> </li> <li> <p>Your PC should play the \"Device connected\" sound and a drive should show up on your PC, you should be able to access and open it.  </p> </li> <li> <p>Drag the <code>.uf2</code> file into the root of the drive and wait for the file transfer to finish. The drive will eject itself after it's done.  </p> </li> <li> <p>Your modchip is now flashed with the latest firmware version, proceed with the modchip installation for your model of Switch console by pressing the relevant button below.</p> </li> </ol> About flashing Hwfly/SX series modchips <p>Instructions on how to flash Hwfly/SX series differ a tiny amount from Picofly modchips, they don't have the <code>BOOT</code> button and only require you to plug them into your PC to flash them.</p> <p>Continue to Modchip installation Switch </p> <p>Continue to Modchip installation Switch Lite </p> <p>Continue to Modchip installation Switch OLED </p>"},{"location":"modchip/flashing_modchip/#instructions_1","title":"Instructions:","text":"<ol> <li> <p>Download the <code>.zip</code> file from the link below and extract the <code>.zip</code> file to a location on your PC:</p> <ul> <li>Firmware 0.7.2</li> </ul> </li> <li> <p>Position your modchip and included USB debug port in the upwards facing position. This means with the side of the microcontroller (the biggest square chip) facing you. This is important because if you don't do this, you can risk frying the USB circuitry of the modchip. The USB debug port additionally also has <code>UP</code> text written on it to indicate the orientation.  </p> </li> <li> <p>Lift up the locking tab and plug the USB debug port into the connector at the bottom of your modchip, then lock the locking tab to secure the USB debug port in place.  </p> </li> <li> <p>Plug the USB debug port into your PC via your data transfer-capable USB cable.    your PC should play the \"Device connected\" sound, which indicates that it's plugged in correctly.</p> <ul> <li>Note: The modchip will flash blue as soon as it's connected to a power source if the modchip was flashed with spacecraft-nx or hwfly-nx previously. This indicates that it's awaiting USB input. </li> </ul> </li> <li> <p>Open the extracted folder from earlier and run <code>flash.bat</code>.</p> </li> <li> <p>Wait for the script to finish, it will tell you when it's done and prompt you to press a key to exit the flashing script. </p> <p>About \"Spacecraft-NX <code>DFU</code> not found!\"</p> <p>If the flashing script says that the Spacecraft-NX <code>DFU</code> was not found, wait for Windows to finish setting up the device. This can take a minute, so be patient and don't panic. </p> </li> <li> <p>Your modchip is now flashed with the latest firmware version.</p> </li> </ol>"},{"location":"modchip/kamikaze-method/","title":"Kamikaze method","text":""},{"location":"modchip/kamikaze-method/#switch-oled-kamikaze-guide","title":"Switch OLED Kamikaze Guide","text":""},{"location":"modchip/kamikaze-method/#what-is-the-kamikaze-method","title":"What is the \u201cKamikaze method\u201d?","text":"<p>The Kamikaze method introduces a new way to make a connection to the <code>C</code> (DAT0) point without the need of a DAT0 adapter or interposer board. This process requires grinding down to the third layer of the motherboard to expose the DAT0 trace, which we can then pre-tin and solder to. It comes with the very high risk of completely bricking your device if you do not have the required skills. Please do not attempt this if you do not have the required experience and follow the DAT0 Adapter method instead.</p> <p>Credit: This page was created in a collaboration between Stashboy and I, photos and instructions were taken/written by Stashboy and were slightly modified by me for implementation in this guide.</p>"},{"location":"modchip/kamikaze-method/#requirements","title":"Requirements:","text":"<ul> <li>Microscope with sufficient lighting</li> <li>Grinding pen with a 0.2mm tip</li> <li>Multimeter</li> <li>UV Solder mask</li> <li>UV Light</li> <li>Solder with rosin core, preferably 0.8mm in diameter or less</li> <li>Soldering iron (with a tip like the <code>TS-J02</code>)</li> <li>Flux</li> <li>Tweezers</li> <li>Enameled/Magnet wire: 32-36 awg</li> <li>IPA: 90-99%</li> <li>Q-tips or cleaning wipes</li> <li>Hot air rework station (optional)</li> <li>Low melt solder paste (optional)</li> </ul>"},{"location":"modchip/kamikaze-method/#now-lets-dive-in","title":"Now, let\u2019s dive in:","text":"<ol> <li> <p>First, start off by identifying the area of the board you will be grinding. The trace is located exactly 1mm away from the <code>A</code>(CMD) point. Refer to the red outline in the photo below for a visual reference. </p> </li> <li> <p>Apply Flux or IPA to the grinding area to keep debris from scattering all over the board. </p> </li> <li> <p>Begin grinding an outline that you\u2019re going to stay within throughout the process. </p> </li> <li> <p>Expose the entire first layer and do not forget to keep applying Flux or IPA to keep the area wet. Grind evenly and take your time! Continue grinding away the first layer. </p> </li> <li> <p>After grinding away the first layer, you should now have reached a brown interposer layer. These layers consist of silicon/fiberglass and will reside in between all layers of the motherboard. Continue grinding through it. </p> </li> <li> <p>We have now reached the second layer. This is where the process gets very risky. Grinding too far down can result in your console being bricked. Take your time and grind evenly! </p> </li> <li> <p>This is now the second interposer layer. The trace we\u2019re looking for is right underneath it. You can apply Flux or IPA to see the traces, there are a few. We\u2019re looking for the trace that has a circular tip towards CMD/A. Refer to the photo for reference. Once you\u2019ve successfully located the trace, start to grind only the circular part of the trace to expose it. Grinding too deep will completely brick your system, take your time!!! </p> </li> <li> <p>Once the trace is exposed, clean the area completely. It will look very dry, that is perfectly fine. Now give the system a test boot to make sure you\u2019ve successfully exposed the trace without bricking the system.</p> <ul> <li>Optional: Test the <code>C</code> point by putting the negative lead of your multimeter on the exposed DAT0 trace and putting your positive lead on ground. You should end up with a value in between ~<code>0.450</code>-<code>0.850</code> generally, speaking. This value is measured in Diode mode on a multimeter. (As mentioned at the top of the main installation page, the range differs from console to console and if it works for you, there is no issue.) </li> </ul> </li> <li> <p>Apply UV solder mask to the exposed area, however, leave the DAT0 trace uncovered. Cure the UV solder mask using a UV Light for 1 to 3 minutes depending on the quality and strength of your light. </p> </li> <li> <p>You should now have a masked area, with an exposed DAT0 trace. We can now apply solder to the exposed DAT0 trace.</p> <ul> <li>Alternatively: You can also apply low melt solder paste to the exposed trace and use your hot air station to form the paste into a solder ball on the trace. </li> </ul> <p></p> </li> <li> <p>Cut a piece of enameled/magnet wire, pre-tin it, then proceed to adding flux to the solder ball you\u2019ve created. You can now use your tweezers and soldering iron to guide the wire onto the solder ball. Remember, we\u2019re three layers down. It will take a decent amount of heat (~350-360C) to melt the solder and successfully get the wire to stick to the point. If the connection is weak but there, add some solder mask to the wire to hold it in place. You can now apply a bit more solder to form a better connection.</p> <ul> <li>Alternatively: You can apply low melt solder and use hot air once again to form a better connection. </li> </ul> </li> <li> <p>You should now have a wire soldered onto the trace successfully. Apply solder mask to cover the entire area, then cure it for 1 to 3 minutes and continue on to the rest of your modchip installation! </p> </li> </ol>"},{"location":"modchip/kamikaze-method/#everything-looking-good","title":"Everything looking good?:","text":"<p>If everything looks good, we will return back to the original installation guide. Continue from Step 15 onwards.</p> <p>Continue to the main Installation guide </p>"},{"location":"modchip/lite/","title":"Modchip installation Switch Lite","text":""},{"location":"modchip/lite/#the-installation","title":"The Installation","text":"<p>This page will guide you through the modchip installation process on \"Lite\" model Switch consoles. Everything you need will be listed and pictures of what your solder joints should (roughly) look like will be posted by each step. Specific steps such as photos of the screws you need to unscrew aren't mentioned here as they can be found on guides from iFixit (for example). It's expected for you to know what to unscrew.</p>"},{"location":"modchip/lite/#diode-reading-values","title":"Diode reading values","text":"<p>These values can differ from console to console. If your modchip installation works fine and doesn't match these exact values, it's not an issue. These values can act as \"indicators\" about what you might expect.</p> Positive to ground Negative to ground SP1 <code>~0.125</code> SP1 <code>~0.125</code> SP2 <code>~0.12</code> SP2 <code>~0.10</code> A (CMD) <code>~0.470</code> A (CMD) <code>~0.875</code> B (RST) <code>~0.405</code> B (RST) <code>OL</code> C (DAT0) <code>~0.435</code> C (DAT0) <code>~0.450-0.850</code> D (CLK) <code>~0.440</code> D (CLK) <code>~0.880</code> 3.3v <code>~0.445</code> 3.3v <code>~0.850</code>"},{"location":"modchip/lite/#requirements","title":"Requirements:","text":"<ul> <li>A soldering iron with a small(er) tip (preferably temperature controlled that can reach 350C consistently)</li> <li>Good quality flux</li> <li>The right screwdriver bits (+00 and Y1.5 bits)</li> <li>Good quality 30-32 awg wire (such as Kynar wire, other wire can work as long as it's single core)</li> <li>Thermal paste (preferably non-conductive)</li> <li>Isopropyl Alcohol (preferably 95-99% IPA)</li> <li>Your modchip (including the SoC ribbon cable)</li> <li>Kapton tape (optional, but recommended)</li> <li>Toothpicks/Q-tips (to remove the thermal paste between the capacitors on the SoC)</li> <li>Soldering tin (leaded is recommended, unleaded will work depending on your skill level)</li> <li>Double sided tape</li> <li>A fume extractor (for your own health and safety)</li> <li>A microscope (optional but recommended)</li> <li>UV Solder mask (optional but recommended)</li> </ul> Note for stock RP2040 Zero development board users <p>If you use a stock <code>RP2040 Zero</code> development board, you will need to desolder the USB-C port,<code>BOOT</code> and <code>RESET</code> buttons before continuing. You'll also need to purchase the SoC ribbon cable separately together with 5x <code>0805 47\u03a9 +-1%</code> resistors (5x is recommended, 3x is possible in some instances).  The resistors can be purchased on AliExpress or websites like Digikey or Mouser Electronics. The SoC ribbon cable can be purchased from AliExpress.</p>"},{"location":"modchip/lite/#instructions","title":"Instructions:","text":"<ol> <li> <p>Unscrew the Switch's backplate.       </p> </li> <li> <p>Remove the metal shield/cover.      </p> </li> <li> <p>Remove the heatpipe/heatsink.      </p> </li> <li> <p>Remove the IHS (Internal Heat Spreader) to expose the bare SoC die and RAM chips.      </p> </li> <li> <p>Remove and disconnect the Gamecard reader, then remove and clean up the thermal paste on the SoC die and around/in-between the capacitors on the SoC using IPA.</p> <ul> <li>You can also clean off the thermal paste between the IHS and heatpipe/heatsink in the meantime, the red-ish colored thermal goop between the heatpipe/heatsink and metal shield/cover can be left alone.</li> </ul> <p></p> </li> <li> <p>Apply flux and pre-tin the pads labeled <code>SP1</code> and <code>SP2</code> on the SoC ribbon cable.       </p> </li> <li> <p>Place the SoC ribbon cable and align the ribbon cable with the capacitors on the SoC.       </p> </li> <li> <p>Tuck the anker points underneath the metal frame below the SoC and the MOSFET section of the ribbon cable underneath the frame between the SoC and RAM, then solder the ribbon cable down once lined up correctly.</p> </li> <li> <p>Apply flux and use your soldering iron to heat up the end of each capacitor together with the respective pad next to both ends of each capacitor of the <code>SP1</code> and <code>SP2</code> points, ensure the solder flows between the pad on the ribbon cable and end of the capacitor.</p> </li> <li> <p>Your ribbon cable should now be secured in place with both ends of each capacitor soldered to the pads on the ribbon cable.</p> <ul> <li>Optional: Place Kapton tape across your solder joints to prevent thermal paste from potentially corroding your solder joints in the future. It also helps in cases where you might have to rework your solder joints. (I did do this but didn't take a photo of it.)</li> </ul> <p></p> </li> <li> <p>The following pads are located directly to the right of the metal eMMC cover/frame.       Tin the end of your wire and solder it to the <code>C</code> (DAT0, in red) pad(s) on the motherboard. Be careful that you don't bridge the pads next to-, above and below these two pads. Solder this piece of wire to the <code>C</code> pad on the modchip.       Tin the end of your wire and solder it to the <code>A</code> (CMD, in green) pad(s) on the motherboard. Be careful that you don't bridge the pads next to-, above and below these two pads. Solder this piece of wire to the <code>A</code> pad on the     modchip.      Tin the end of your wire and solder it to the <code>D</code> (CLK, in blue) pad(s) on the motherboard. Be careful that you don't bridge the pads next to-, above and below these two pads. Solder this piece of wire to the <code>D</code> pad on the modchip. </p> <ul> <li>Note: Each set of two pads are horizontally connected to each other. Bridging them will not cause any harm and is also the recommended thing to do.  </li> </ul> </li> <li> <p>This capacitor is located next to the bottom right of the Gamecard reader's plastic frame.       Tin the end of your wire and solder it to the top end of the <code>3.3v</code> capacitor. Be careful once again and make sure you don't bridge this point with any pads next to it. Solder this piece of wire to the <code>3.3v</code> pad on the modchip.</p> <ul> <li>Optional: Use UV solder mask on this point. It's a fragile point and you won't want to have to resolder/rework it in the future.</li> </ul> <p></p> </li> <li> <p>Tin the end of your wire and solder it to the <code>B</code> (RST) pad on the motherboard. Be careful that you don't bridge the pads next to- and below these two pads. Solder this piece of wire to the <code>B</code> pad on the modchip.</p> <p></p> </li> <li> <p>Tin the end of your wire and solder it to a ground point on the motherboard. We will be using the point shown below (located to the bottom left of the fan, above the RAM chips). Once done, solder this piece of wire to the <code>GND</code>pad on the modchip.</p> <p></p> </li> <li> <p>Modify the left side (right side in the image below, as the IHS is upside down) of the IHS so that the SoC ribbon cable can fit through the left side of the IHS.</p> <p></p> </li> <li> <p>Once done, connect the ribbon cable to the port on the modchip by bending the SoC ribbon cable accordingly. (Be careful!)</p> <ul> <li>Optional: At this point, you can test if your modchip installation was successful. Re-connect the battery and the screen ribbon cable, then turn the console on. You should end up at a <code>No SD Card</code> splash screen with the Picofly logo.</li> <li>Note: Getting to the <code>No SD Card</code> screen does not always indicate success. Sometimes solder joints or electrical connections may be good enough for glitching but not for booting HOS (HorizonOS), please ensure that you test if your console boots by ensuring the console is off, then holding both volume buttons and pressing the power button once, letting go of the volume buttons when you see the Nintendo logo. If your Switch does not boot normally, please check if your console boots by removing the modchip (not the SoC ribbon cable), then turning the console on normally. If you still experience issues related to glitching/training, refer to the troubleshooting page.</li> </ul> <p></p> </li> <li> <p>Place/position the modchip on top of the eMMC's metal cover plate at the top left, next to the SoC's frame, and secure it in place by using double sided tape.</p> </li> <li> <p>If everything looks as expected (like the images below), you can continue with reassembling the console. (Don't forget to apply thermal paste!)</p> <p> </p> </li> <li> <p>Once the console is fully reassembled and you turn it on, you should still end up at the <code>No SD Card</code> splash screen. You've successfully installed the modchip.</p> <p> </p> </li> </ol>"},{"location":"modchip/lite/#whats-next","title":"What's next?","text":"<p>From here, if you get the same result as I did, you can continue following the NH Server guide to set up CFW by clicking the button below. If you want to know more about the functionality of modchips, visit the Functionality of modchips page.</p> <p>If you'd like to donate to me, visit the Credits section.</p> <p>Continue to the NH Server guide </p> <p>If you didn't get the same result as I did and are running into issues, please follow the troubleshooting section of this guide. It can be found here.</p>"},{"location":"modchip/modchip_choice/","title":"Modchip variants","text":""},{"location":"modchip/modchip_choice/#modchip-models","title":"Modchip models","text":"<p>There are different modchip models for each model of Switch console, technically you can also use modchip models not meant for your specific Switch console but it can introduce complications, which is why it won't be covered here.</p> <p>The modchip models we will be covering in this guide are:</p> <ul> <li>Picofly Core (For Normal Switch models | <code>HAC-001</code>, <code>HAC-001(-01)</code>)</li> <li>Picofly Lite (For Lite Switch models   | <code>HDH-001</code>)</li> <li>Picofly OLED (For OLED Switch models   | <code>HEG-001</code>)</li> <li>Picofly (Stock development board       | <code>HAC-001</code>, <code>HAC-001(-01)</code>, <code>HDH-001</code>, <code>HEG-001</code>)</li> </ul>"},{"location":"modchip/modchip_choice/#below-you-can-unfold-the-relevant-section-find-out-what-the-modchip-for-your-model-of-switch-looks-like","title":"Below you can unfold the relevant section find out what the modchip for your model of Switch looks like:","text":"Picofly Core <p>Picofly Core is the modchip model for \"Normal\" Switch consoles, such as regular V1 and V2 consoles. This modchip plugs into the eMMC FPC port on the motherboard and sits on top of the RAM part of the SoC/RAM \"IHS\" (Internal Heat Spreader) once installed.</p> <p>This is what it looks like:</p> <p></p> Picofly Lite <p>Picofly Lite is the modchip model for \"Lite\" Switch consoles, this modchip is positioned at the top left next to the corner of the SoC \"IHS\" (Internal Heat Spreader) frame and on top of the metal plate covering the eMMC once installed.</p> <p>This is what it looks like:</p> <p></p> Picofly OLED <p>Picofly OLED is the modchip model for \"OLED\" Switch consoles, this modchip is also positioned on the the RAM section of the SoC/RAM \"IHS\" (Internal Heat Spreader) like the Picofly Core model once installed.</p> <p>This is what it looks like:</p> <p></p> Picofly (Stock development board) <p>Picofly was originally based off of the stock <code>RP2040 Zero</code> board and is still the most reliable Picofly modchip due to the quality control of these development boards. The installation is a bit more \"bare\" as you will need to use wire to solder from the development board to the required solder points on the motherboard. Buying an SoC ribbon cable for the solder points on the SoC is recommended if you do decide to go with this method. You will also need to buy the required resistors but there will be more information on this later in the guide. This modchip is compatible with all models of Switch consoles.</p> <p>This is what it looks like:</p> <p></p> <p>Once you're done, continue to the next page using the button below.</p> <p>Continue to Flashing the modchip </p>"},{"location":"modchip/normal/","title":"Modchip installation Switch","text":""},{"location":"modchip/normal/#the-installation","title":"The Installation","text":"<p>This page will guide you through the modchip installation process on \"Normal\" model Switch consoles. Everything you need will be listed and pictures of what your solder joints should (roughly) look like will be posted by each step. Specific steps such as photos of the screws you need to unscrew aren't mentioned here as they can be found on guides from iFixit (for example). It's expected for you to know what to unscrew.</p>"},{"location":"modchip/normal/#diode-reading-values","title":"Diode reading values","text":"<p>These values can differ from console to console. If your modchip installation works fine and doesn't match these exact values, it's not an issue. These values can act as \"indicators\" about what you might expect.</p> Positive to ground Negative to ground SP1 <code>~0.125</code> SP1 <code>~0.125</code> SP2 <code>~0.12</code> SP2 <code>~0.10</code>"},{"location":"modchip/normal/#requirements","title":"Requirements:","text":"<ul> <li>A soldering iron with a small(er) tip (preferably temperature controlled that can reach 350C consistently)</li> <li>Good quality flux</li> <li>The right screwdriver bits (+00 and Y1.5 bits)</li> <li>Thermal paste (preferably non-conductive)</li> <li>Isopropyl Alcohol (preferably 95-99% IPA)</li> <li>Your modchip (including the SoC ribbon cable)</li> <li>Kapton tape (optional, but recommended)</li> <li>Toothpicks/Q-tips (to remove the thermal paste between the capacitors on the SoC)</li> <li>Soldering tin (leaded is recommended, unleaded will work depending on your skill level)</li> <li>A fume extractor (for your own health and safety)</li> <li>A microscope (optional but recommended)</li> </ul> Note for stock RP2040 Zero development board users <p>If you use a stock <code>RP2040 Zero</code> development board, you will need to desolder the USB-C port,<code>BOOT</code> and <code>RESET</code> buttons before continuing. You'll also need to purchase the SoC ribbon cable separately together with 5x <code>0805 47\u03a9 +-1%</code> resistors (5x is recommended, 3x is possible in some instances).  The resistors can be purchased on AliExpress or websites like Digikey or Mouser Electronics. The SoC ribbon cable can be purchased from AliExpress.</p>"},{"location":"modchip/normal/#instructions","title":"Instructions:","text":"<ol> <li> <p>Unscrew and remove the Switch's backplate. Ensure you remove both middle screws on either side of the console, the screw at the top of the console, the two screws at the bottom of the console and the screw underneath the kickstand.       </p> </li> <li> <p>Remove the SD card reader.       </p> </li> <li> <p>Remove the metal shield/cover and disconnect the battery in the bottom right of the motherboard.      </p> </li> <li> <p>Remove the heatpipe/heatsink.      </p> </li> <li> <p>Remove the IHS (Internal Heat Spreader) to expose the bare SoC die and RAM chips.      </p> </li> <li> <p>Remove and clean up the thermal paste on the SoC die and around/in-between the capacitors on the SoC using IPA.</p> <ul> <li>You can also clean off the thermal paste between the IHS and heatpipe/heatsink in the meantime, the red-ish colored thermal goop between the heatpipe/heatsink and metal shield/cover can be left alone.</li> </ul> <p></p> </li> <li> <p>Remove (unplug) the eMMC module from the motherboard.      </p> </li> <li> <p>Ensure your working area is clean, you do not want to have thermal paste interfere with your soldering tin. This can also cause corrosion over time if you don't clean the area properly.</p> </li> <li> <p>Apply flux and pre-tin the pads labeled <code>SP1</code> and <code>SP2</code> on the SoC ribbon cable. (This process is the same for V2 SoC consoles and ribbon cables, the only difference are the orientation of the capacitors and the pads that are connected to each side of the capacitors on the SoC.)       </p> </li> <li> <p>Place the SoC ribbon cable and align the ribbon cable with the capacitors on the SoC.</p> </li> <li> <p>Tuck the anker points underneath the metal frame below the SoC and the MOSFET section of the ribbon cable underneath the frame between the SoC and RAM, then solder the ribbon cable down once lined up correctly.      </p> </li> <li> <p>Apply flux and use your soldering iron to heat up the end of each capacitor together with the respective pad next to both ends of each capacitor of the <code>SP1</code> and <code>SP2</code> points, ensure the solder flows between the pad on the ribbon cable and end of the capacitor.      </p> </li> <li> <p>Your ribbon cable should now be secured in place with both ends of each capacitor soldered to the pads on the ribbon cable.</p> <ul> <li>Optional: Place Kapton tape across your solder joints to prevent thermal paste from potentially corroding your solder joints in the future. It also helps in cases where you might have to rework your solder joints.    </li> </ul> </li> <li> <p>Install the modchip. Slide the SoC ribbon cable into the connector on the left side of the modchip, install the left side of the modchip onto the eMMC module's FPC connector, install the eMMC module on the modchip, place a non-conductive material (like Kapton tape) between the eMMC module and the RAM chips, reconnect the battery and turn the console on. The modchip should blink blue a couple of times (glitching), then white (success). You should end up at a <code>No SD Card</code> splash screen with the Picofly logo after the modchip blinks white once.</p> <ul> <li>Note: Getting to the <code>No SD Card</code> screen does not always indicate success. Sometimes solder joints or electrical connections may be good enough for glitching but not for booting HOS (HorizonOS), please ensure that you test if your console boots by ensuring the console is off, then holding both volume buttons and pressing the power button once, letting go of the volume buttons when you see the Nintendo logo. If your Switch does not boot normally, please check if your console boots by removing the modchip (not the SoC ribbon cable) and placing the eMMC module back in its original place, then turning the console on normally. If you still experience issues related to glitching/training, refer to the troubleshooting page.</li> </ul> <p> </p> </li> <li> <p>Modify the IHS so that the SoC ribbon cable can stick out at the top. Bend the folded over side at the top of the SoC section flat with the end of tweezers or another strong flat material.      </p> </li> <li> <p>Reassemble the console (don't forget to apply thermal paste!) until you're at the point of putting the metal shield/backplate back in place. The modchip will not fit underneath the metal shield/backplate so you will need to cut a strip out of it, how I personally do this is by using regular scissors and cutting out the middle section.      </p> </li> <li> <p>Once done, you can fully reassemble the console and your console should now display <code>No SD Card</code> when you turn it on normally.       </p> </li> </ol>"},{"location":"modchip/normal/#whats-next","title":"What's next?","text":"<p>From here, if you get the same result as I did, you can continue following the NH Server guide to set up CFW by clicking the button below. If you want to know more about the functionality of modchips, visit the Functionality of modchips page.</p> <p>If you'd like to donate to me, visit the Credits section.</p> <p>Continue to the NH Server guide </p> <p>If you didn't get the same result as I did and are running into issues, please follow the troubleshooting section of this guide. It can be found here.</p>"},{"location":"modchip/oled/","title":"Modchip installation Switch OLED","text":""},{"location":"modchip/oled/#the-installation","title":"The Installation","text":"<p>This page will guide you through the modchip installation process on \"OLED\" model Switch consoles. Everything you need will be listed and pictures of what your solder joints should (roughly) look like will be posted by each step. Specific steps such as photos of the screws you need to unscrew aren't mentioned here as they can be found on guides from iFixit (for example). It's expected for you to know what to unscrew.</p>"},{"location":"modchip/oled/#diode-reading-values","title":"Diode reading values","text":"<p>These values can differ from console to console. If your modchip installation works fine and doesn't match these exact values, it's not an issue. These values can act as \"indicators\" about what you might expect. Especially the <code>C</code> (DAT0) point can have a large range of acceptable values.</p> Positive to ground Negative to ground SP1 <code>~0.420</code> SP1 <code>~0.520</code> SP2 <code>~0.25</code> SP2 <code>~0.20</code> A (CMD) <code>~0.470</code> A (CMD) <code>~0.875</code> B (RST) <code>~0.405</code> B (RST) <code>OL</code> C (DAT0) <code>~0.435</code> C (DAT0) <code>~0.450-0.850</code> D (CLK) <code>~0.440</code> D (CLK) <code>~0.880</code> 3.3v <code>~0.445</code> 3.3v <code>~0.850</code>"},{"location":"modchip/oled/#requirements","title":"Requirements:","text":"<ul> <li>A soldering iron with a small(er) tip (preferably temperature controlled that can reach 350C consistently)</li> <li>Good quality flux</li> <li>The right screwdriver bits (+00 and Y1.5 bits)</li> <li>Good quality 30-32 awg wire (such as Kynar wire, other wire can work as long as it's single core)</li> <li>Thermal paste (preferably non-conductive)</li> <li>Isopropyl Alcohol (preferably 95-99% IPA)</li> <li>Your modchip (including the SoC ribbon cable and DAT0 adapter)</li> <li>Kapton tape (optional, but recommended)</li> <li>A dental pick or other thin and sharp tool (to scrape away the top layer of the PCB for the D point)</li> <li>Toothpicks/Q-tips (to remove the thermal paste between the capacitors on the SoC)</li> <li>Soldering tin (leaded is recommended, unleaded will work depending on your skill level)</li> <li>Double sided tape</li> <li>A fume extractor (for your own health and safety)</li> <li>A microscope (optional but recommended)</li> <li>UV Solder mask (optional but recommended)</li> </ul>"},{"location":"modchip/oled/#additional-andor-optional-requirements-for-the-kamikaze-method","title":"Additional and/or optional requirements for the Kamikaze method:","text":"<ul> <li>A grinding pen such as the <code>MaAnt D2</code> with 0.2mm tip (Kamikaze method users ONLY)</li> <li>32-36 awg magnet/enameled wire (Kamikaze method users ONLY)</li> <li>Solder with the width of 0.8mm or smaller</li> <li>A soldering iron tip like the <code>TS-J02</code></li> <li>UV Solder mask</li> <li>UV Light</li> </ul> <p>The Kamikaze method</p> <p>The Kamikaze method is also covered on this page, be aware that this is a VERY risky procedure and that you should not attempt this without the required skills/tools. You will find the divide between the DAT0 Adapter and Kamikaze methods at step 14.</p> Note for stock RP2040 Zero development board users <p>If you use a stock <code>RP2040 Zero</code> development board, you will need to desolder the USB-C port,<code>BOOT</code> and <code>RESET</code> buttons before continuing. You'll also need to purchase the SoC ribbon cable separately together with 5x <code>0805 47\u03a9 +-1%</code> resistors (5x is recommended, 3x is possible in some instances).  The resistors can be purchased on AliExpress or websites like Digikey or Mouser Electronics. The SoC ribbon cable can be purchased from AliExpress.</p>"},{"location":"modchip/oled/#instructions","title":"Instructions:","text":"<ol> <li> <p>Unscrew the Switch's backplate.  </p> </li> <li> <p>Remove the metal shield/cover (be careful with the antennas that are routed across the metal shield/cover) and disconnect the battery at the bottom right of the motherboard. </p> </li> <li> <p>Remove the Gamecard reader/SD card reader board. </p> </li> <li> <p>Remove the heatpipe/heatsink. </p> </li> <li> <p>Remove the IHS (Internal Heat Spreader) to expose the bare SoC die and RAM chips. </p> </li> <li> <p>Remove and clean up the thermal paste on the SoC die and around/in-between the capacitors on the SoC using IPA.</p> <ul> <li>You can also clean off the thermal paste between the IHS and heatpipe/heatsink in the meantime, the red-ish colored thermal goop between the heatpipe/heatsink and metal shield/cover can be left alone.  </li> </ul> </li> <li> <p>Remove the fan and unplug the fan ribbon cable, joycon rail ribbon cables, screen ribbon cable and speaker connectors.</p> </li> <li> <p>Unscrew and remove the bottom bar of the shell.</p> </li> <li> <p>Remove the motherboard from the Switch casing. </p> </li> <li> <p>Remove the metal plate covering the eMMC chip on the back of the motherboard. (Only for people following the DAT0 adapter method.) </p> </li> <li> <p>Turn the motherboard back around, remove a part of the SoC/RAM frame next to the <code>D</code>(CLK) point and scrape away the <code>D</code>(CLK) point on the motherboard using a thin and sharp metal tool until the pad underneath is visible and open to the air (otherwise you won't be able to follow along with the next step).  </p> </li> <li> <p>Tin the <code>D</code>(CLK) point and wire, then solder a piece of your wire to the <code>D</code> point and solder it to the <code>D</code> point on the modchip.</p> <ul> <li>Optional: Use UV solder mask on the <code>D</code> point. It's a very fragile point and is not something you want to have to potentially resolder in the future.  </li> </ul> </li> <li> <p>Tin your wire and solder a piece of wire to the bottom end of the <code>A</code>(CMD) resistor, then solder the other end of the wire to the <code>A</code> point on the modchip. Be careful, as heating this resistor up too much has the chance to kill the resistor or will cause it to stick to your soldering iron and wipe it off of the motherboard completely (this only happens if your soldering iron is too hot and hold it on the resistor for too long).</p> <ul> <li>Optional: Use UV solder mask on the <code>A</code> point. It's a very fragile point and is not something you want to have to potentially resolder in the future.  </li> </ul> </li> <li>"},{"location":"modchip/oled/#cdat0-point-methods","title":"<code>C</code>(DAT0) Point methods","text":"<li> <p>Now, we will locate the <code>3.3v</code> capacitors near the top-middle on the front of the motherboard. Solder a piece of wire to the bottom end of the right capacitor and solder the other end of the wire to the <code>3.3v</code> pad on the modchip.  </p> </li> <li> <p>Locate the <code>GND</code> (ground) pad on the middle-right side of the motherboard. Solder a piece of wire to it and solder the other end of the wire to the <code>GND</code> pad on the modchip.  </p> </li> <li> <p>Turn the motherboard back around and locate the <code>B</code> point on the back of the motherboard. It's located at the very bottom of the motherboard, to the left of the C shaped \"cutout\" for the left speaker cable. Solder a wire to the <code>B</code> point and solder the other end of the wire to the <code>B</code> point at the bottom of your modchip.  </p> </li> <li> <p>Apply flux and pre-tin the pads labeled <code>SP1</code> and <code>SP2</code> on the SoC ribbon cable.  </p> </li> <li> <p>Place the SoC ribbon cable and align the ribbon cable with the capacitors on the SoC.  </p> </li> <li> <p>Tuck the anker points underneath the metal frame below the SoC and the MOSFET section of the ribbon cable underneath the frame between the SoC and RAM, then solder the ribbon cable down once lined up correctly.      Apply flux and use your soldering iron to heat up the end of each capacitor together with the respective pad next to both ends of each capacitor of the <code>SP1</code> and <code>SP2</code> points, ensure the solder flows between the pad on the ribbon cable and end of the capacitor. </p> </li> <li> <p>Your ribbon cable should now be secured in place with both ends of each capacitor soldered to the pads on the ribbon cable.</p> <ul> <li>Optional: Place Kapton tape across your solder joints to prevent thermal paste from potentially corroding your solder joints in the future. It also helps in cases where you might have to rework your solder joints.  </li> </ul> </li> <li> <p>Plug the SoC ribbon cable into the port on the top left of the modchip, make sure you lift the locking tab up first before inserting it. Once inserted, lock the locking tab again. </p> </li> <li> <p>Modify the IHS to make the SoC ribbon cable fit out of the top of the SoC section of the IHS and reinstall the IHS. (Don't forget to apply thermal paste in between the SoC and IHS!) </p> </li> <li> <p>Place a piece of double sided tape on top of the RAM section of the IHS, then place the modchip on top of it to secure it in place. Make sure no components (such as the SoC ribbon cable and wires you soldered onto the modchip) are under any kind of stress when doing this. </p> </li> <li> <p>Your Switch should now look like the image below. If it does, you can re-connect the battery connector, power button board and screen ribbon cable and power the console on. After the modchip glitches and trains (blinks blue, then white), you should be greeted with the <code>No SD Card</code> splash screen with the Picofly logo.</p> <ul> <li>Note: Getting to the <code>No SD Card</code> screen does not always indicate success. Sometimes solder joints or electrical connections may be good enough for glitching but not for booting HOS (HorizonOS), please ensure that you test if your console boots by ensuring the console is off, then holding both volume buttons and pressing the power button once, letting go of the volume buttons when you see the Nintendo logo. If your Switch does not boot normally, please check if your console boots by removing the modchip (not the SoC ribbon cable), then turning the console on normally. If you still experience issues related to glitching/training, refer to the troubleshooting page.</li> </ul> <p> </p> </li> <li> <p>Place a piece of Kapton tape (or other non-conductive material) on top of the modchip and reassemble the console.  </p> </li> <li> <p>Turn the Switch on and you should still end up at the <code>No SD Card</code> splash screen. If so, you've successfully followed and finished this guide. </p> </li>"},{"location":"modchip/oled/#dat0-adapter-method-recommended","title":"DAT0 Adapter method (Recommended)","text":"<p>Continue to DAT0 Adapter method </p>"},{"location":"modchip/oled/#kamikaze-method-advanced-users-only","title":"Kamikaze method (ADVANCED USERS ONLY!)","text":"<p>Continue to Kamikaze method </p>"},{"location":"modchip/oled/#whats-next","title":"What's next?","text":"<p>From here, if you get the same result as I did, you can continue following the NH Server guide to set up CFW by clicking the button below. If you want to know more about the functionality of modchips, visit the Functionality of modchips page.</p> <p>If you'd like to donate to me, visit the Credits section.</p> <p>Continue to the NH Server guide </p> <p>If you didn't get the same result as I did and are running into issues, please follow the troubleshooting section of this guide. It can be found here.</p>"},{"location":"troubleshooting/error_codes/","title":"Error troubleshooting","text":""},{"location":"troubleshooting/error_codes/#information","title":"Information","text":"<p>Are you experiencing issues after your modchip installation? Is your modchip giving you an error code you can't make sense of? Then this is the page for you.</p> <p>Your modchip will give you error codes if there is an issue with the installation. These error codes consist of long/short pulses of LED patterns and sequences. Troubleshooting these error codes can be done by comparing them to existing/known error codes and will hopefully solve the issue you're experiencing.</p>"},{"location":"troubleshooting/error_codes/#error-codes-for-picofly","title":"Error codes for Picofly","text":"<p>The following information was obtained from this github repository and was slightly modified by me:</p>"},{"location":"troubleshooting/error_codes/#as-of-firmware-270-and-above-the-debug-led-colors-and-sequencescodes-have-changed","title":"As of firmware 2.70 and above, the debug LED colors and sequences/codes have changed.","text":"<p>Now the possible status indicators will only consist of 3 colors:</p> <ul> <li>Blue (glitching),</li> <li>White (writing payload or success),</li> <li>Yellow (error code).</li> </ul> <p>This was made possible by using Pi Pico debugging and getting rid of RGB/GRB issues.</p>"},{"location":"troubleshooting/error_codes/#known-error-codes-is-a-long-pulse-is-a-short-pulse","title":"Known error codes (<code>=</code> is a long pulse, <code>*</code> is a short pulse):","text":"<p><code>=</code> USB flashing done.</p> <p><code>**</code> RST (<code>B</code>) is not connected.</p> <p><code>*=</code> CMD (<code>A</code>)is not connected.</p> <p><code>=*</code> D0 (<code>C</code>/<code>DAT0</code>) is not connected.</p> <p><code>==</code> CLK (<code>D</code>) is not connected.</p> <p><code>***</code> No eMMC CMD1 response. (Bad eMMC?)</p> <p><code>**=</code> No eMMC block 1 read. (Should not happen.)</p> <p><code>*==</code> Bad wiring/cabling, typically has to do with the top ribbon cable that connects <code>3.3v</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> and <code>GND</code> pads. (Which is why I don't recommend using that ribbon cable.) Alternatively, it can also mean that the modchip is defective.</p> <p><code>*=*</code> No eMMC block 0 read. (eMMC init failure?)</p> <p><code>=**</code> eMMC initialization failure during glitching process.</p> <p><code>=*=</code> CPU never reach BCT check, should not happen. Typically caused by the SoC ribbon cable not being seated properly.</p> <p><code>==*</code> CPU always reach BCT check (no glitch reaction, check MOSFET/SoC ribbon cable).</p> <p><code>===</code> Glitch attempt limit reached, cannot glitch</p> <p><code>=***</code> eMMC initialization failure</p> <p><code>=**=</code> eMMC write failure - comparison failed</p> <p><code>==</code> eMMC write failure - write failed</p> <p><code>=*==</code> eMMC test failure - read failed</p> <p><code>==**</code> eMMC read failed during firmware update</p> <p><code>==*=</code> BCT copy failed - write failure</p> <p><code>===*</code> BCT copy failed - comparison failure</p> <p><code>====</code> BCT copy failed - read failure</p>"},{"location":"troubleshooting/error_codes/#splash-screen-troubleshooting","title":"Splash screen troubleshooting","text":"<p>Question: It says <code>No SD Card</code> when I turn my console on, what do I do?</p> <p>Answer: This is the \"default\" error screen. Ensure that you insert an SD card with a payload named to <code>payload.bin</code> on the root of your SD card to be able to boot into the desired payload (usually hekate). If it is inserted, your Switch's SD card reader may be malfunctioning. Test it with another SD card and if it also doesn't work, check the FPC port on the motherboard and SD card reader connector for any missing pins (Normal model Switch users). The SD card reader/game card reader board may need to be replaced if on an OLED Switch and the soldered on SD card reader may have to be replaced if on a Switch Lite.</p> <p>Question: It says <code>Failed to init SD Card!</code> when I turn my console on, what do I do?</p> <p>Answer: Make sure your SD card is inserted fully. If it is, your Switch's SD card reader may be malfunctioning. Test it with another SD card and if it also doesn't work, check the FPC port on the motherboard and SD card reader connector for any missing pins (Normal model Switch users). The SD card reader/game card reader board may need to be replaced if on an OLED Switch and the soldered on SD card reader may have to be replaced if on a Switch Lite.</p> <p>Question: It says <code>Failed to mount SD Card!</code> when I turn my console on, what do I do?</p> <p>Answer: Your SD card isn't formatted and/or partitioned correctly. The payload has to be placed on the first partition of the SD card and has to be formatted as <code>FAT32</code> or <code>exFAT</code> (<code>FAT32</code> being the best option out of the two) for the SD card to be able to be mounted (accessible for the modchip and <code>sdloader</code>). Another cause of this issue can be due to SD card corruption and would require you to perform SD card integrity checks, for which a guide on how to do so can be found here.</p> <p>Question: It says <code>Payload size too large!</code> when I turn my console on, what do I do?</p> <p>Answer: Make sure the payload size is equal to/-or less than 128KB. If you get this error, you're very likely using the wrong payload and should re-read the instructions mentioned in the NH-Server guide.</p> <p>Question: It says <code>Failed to open payload.bin!</code> when I turn my console on, what do I do?</p> <p>Answer: The payload on the root of your SD card is likely missing or has the wrong file name. Make sure <code>payload.bin</code> exists on the root of the SD card and that you have file extensions enabled on the OS you're using. The file name has to be <code>payload.bin</code> and not <code>payload.bin.bin</code> for example (this can happen if you do not have file extensions enabled).</p> <p>Question: It says <code>Payload is less than 128KB!</code> when I turn my console on, what do I do?</p> <p>Answer: Make sure the payload size is equal to/-or less than 128KB. If you get this error, you're very likely using the wrong payload and should re-read the instructions mentioned in the NH-Server guide.</p>"},{"location":"troubleshooting/error_codes/#stock-picofly-development-board-users","title":"Stock Picofly development board users","text":"<p>This section is only useful for the stock development board users.</p> <p>The second major feature is CPU downvoltage. This might be useful when your MOSFET (or the wire) is not thick enough for the glitching process. (Do you remember the case where you would press the \"RESET\" button on the RP2040 development board when the joycon logo appeared to make it work? That's it, the system lowers CPU voltage for glitching to work.)</p> <p>You can solder two additional wires to your development board so it can lower the CPU voltage making the glitching process easier. This is optional and only something you should do if you really need to.</p> <ul> <li> <p>Waveshare RP2040 Zero: <code>SDA = 12, SCL = 13</code></p> </li> <li> <p>Raspberry Pi RP2040 Pico: <code>SDA = 19, SCL = 20</code></p> </li> <li> <p>XIAO RP2040: <code>SDA = 3, SCL = 4</code></p> </li> <li> <p>ItsyBitsy RP2040: <code>SDA = 18, SCL = 19</code></p> </li> </ul> <p>If you still experience errors with your Picofly modchip, visit the #switch-assistance-1 or #switch-assistance-2 channels in the NH-Discord server here.</p>"},{"location":"troubleshooting/error_codes/#error-codes-for-hwfly","title":"Error codes for Hwfly","text":"<p>The following information was obtained from this github repository:</p> <ul> <li>Note: We do not assist with Hwfly/Instinct-NX based modchips in the NH Discord server. This section solely exists for your own troubleshooting purposes.</li> </ul> <p></p>"}]}